# Set the number of worker processes. 
# Ideally, this should match the number of CPU cores available on your system to maximize performance.
# If you set this to 'auto', Nginx will automatically detect and use the number of CPU cores for optimal performance.
worker_processes 1;

events {
    # Define the maximum number of simultaneous connections that can be handled by each worker process.
    # '1024' means up to 1024 connections per worker process. This can be adjusted based on expected traffic.
    worker_connections 1024;
}

http {
    # Include MIME types for handling different file types.
    # This ensures Nginx knows how to handle various file extensions and their types. For example: .html â†’ text/html
    include mime.types;

    # Define an upstream block to manage the backend Node.js servers.
    # The 'least_conn' directive means Nginx will forward traffic to the Node.js server with the fewest active connections.
    upstream nodejs_cluster {
       
        # Balance requests by the least number of connections
        least_conn;  
        
        # List the backend servers (Node.js applications) that Nginx will proxy requests to.
        # These servers run locally (127.0.0.1) on ports 3001, 3002, and 3003.
        server 127.0.0.1:3001;
        server 127.0.0.1:3002;
        server 127.0.0.1:3003;
    }

    # Define a server block that listens on port 8080 for HTTP requests.
    server {

        # Listen for incoming requests on port 8080. The server is identified by 'localhost' in this configuration.
        listen 8080;  
        server_name localhost;  

        # Define how incoming requests will be handled.
        location / {

            # Proxy requests to the 'nodejs_cluster' upstream group, which balances the load across the backend Node.js servers.
            proxy_pass http://nodejs_cluster;

            # Pass the original host header from the client to the backend server.
            proxy_set_header Host $host;
            
            # Pass the real client IP address to the backend server.
            proxy_set_header X-Real-IP $remote_addr;
        }
    }
}